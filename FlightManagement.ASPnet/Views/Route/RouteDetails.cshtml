@model dynamic

<h1>Детали маршрута</h1>
<h2>Маршрут ID: @Model.RouteID</h2>
<p>Время вылета: @Model.DepartureTime</p>
<p>Дата: @Model.Date.ToShortDateString()</p>

<h3>Остановки</h3>
<table>
    <thead>
        <tr>
            <th>Аэропорт</th>
            <th>Локация</th>
            <th>Время прибытия</th>
            <th>Время отправления</th>
            <th>Статус</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var stop in Model.Stops)
        {
            <tr>
                <td>@stop.AirportName</td>
                <td>@stop.AirportLocation</td>
                <td>@stop.ArrivalTime</td>
                <td>@stop.DepartureTime</td>
                <td>@stop.StatusName</td>
            </tr>
        }
    </tbody>
</table>

<h3>Временная шкала остановок</h3>
<canvas id="timelineChart" width="400" height="200"></canvas>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const ctx = document.getElementById('timelineChart').getContext('2d');
    const stops = @Html.Raw(Json.Serialize(Model.Stops));

    const labels = stops.map(stop => stop.AirportName);
    const departureTimes = stops.map(stop => new Date(`1970-01-01T${stop.DepartureTime}:00`).getTime());
    const arrivalTimes = stops.map(stop => new Date(`1970-01-01T${stop.ArrivalTime}:00`).getTime());

    const timelineChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Время прибытия',
                data: arrivalTimes,
                backgroundColor: 'rgba(75, 192, 192, 0.5)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1,
                yAxisID: 'y',
            }, {
                label: 'Время отправления',
                data: departureTimes,
                backgroundColor: 'rgba(255, 99, 132, 0.5)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1,
                yAxisID: 'y',
            }]
        },
        options: {
            scales: {
                y: {
                    type: 'time',
                    position: 'left',
                    title: {
                        display: true,
                        text: 'Время'
                    },
                    ticks: {
                        callback: function (value) {
                            return new Date(value).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                        }
                    }
                }
            }
        }
    });
</script>
